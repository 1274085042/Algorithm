#coding=utf-8
# I am not responsible of this code.
# They made me write it, against my will.
'''
题目描述
王强今天很开心，公司发给N元的年终奖。王强决定把年终奖用于购物，他把想买的物品分为两类：主件与附件，
附件是从属于某个主件的，下表就是一些主件与附件的例子：
主件	    附件
电脑	    打印机，扫描仪
书柜	    图书
书桌	    台灯，文具
工作椅	无
如果要买归类为附件的物品，必须先买该附件所属的主件。每个主件可以有 0 个、 1 个或 2 个附件。
附件不再有从属于自己的附件。王强想买的东西很多，为了不超出预算，他把每件物品规定了一个重要度，
分为 5 等：用整数 1 ~ 5 表示，第 5 等最重要。他还从因特网上查到了每件物品的价格（都是 10 元的整数倍）。
他希望在不超过 N 元（可以等于 N 元）的前提下，使每件物品的价格与重要度的乘积的总和最大。
    设第 j 件物品的价格为 v[j] ，重要度为 w[j] ，共选中了 k 件物品，编号依次为 j 1 ， j 2 ，……， j k ，
    则所求的总和为：
v[j 1 ]*w[j 1 ]+v[j 2 ]*w[j 2 ]+ … +v[j k ]*w[j k ] 。（其中 * 为乘号）
    请你帮助王强设计一个满足要求的购物单。
输入描述:
输入的第 1 行，为两个正整数，用一个空格隔开：N m

（其中 N （ <32000 ）表示总钱数， m （ <60 ）为希望购买物品的个数。）


从第 2 行到第 m+1 行，第 j 行给出了编号为 j-1 的物品的基本数据，每行有 3 个非负整数 v p q


（其中 v 表示该物品的价格（ v<10000 ）， p 表示该物品的重要度（ 1 ~ 5 ），
q 表示该物品是主件还是附件。如果 q=0 ，表示该物品为主件，如果 q>0 ，表示该物品为附件， q 是所属主件的编号）


输出描述:
 输出文件只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（ <200000 ）。
'''
import numpy
while True:
    try:
        N,m=map(int,input().strip().split())  #strip() 删除字符串开头和结尾的空格
        goods=[]
        for i in range(m):
            goods.append(list(map(int,input().strip().split())))
        # print(N)
        # print(m)
        # print(goods)
        #a=[[0]*(N+1) for i in range(m+1)]
        a=numpy.zeros([m+1,N+1],int)    #矩阵a存放价值，a[i][j]表示钱数在j，物品量在i时，所获得的最大价值。
        for i in range(1,m+1):          #表示第i件商品
            for j in range(1,N+1):      #j表示钱数
                if goods[i-1][2]==0:    #表示第i件商品是主商品
                    if goods[i-1][0]<=j:  #表示当前的钱数可以购买这件商品
                        #a[i][j]表示在购买前i件物品时所获得的最大价值
                        '''
                        第i件物品买或不买的问题：
                        (1)如果不买，当前的最大价值就是a[i-1][j]。
                        a[i-1][j]表示钱数为j时，购买前i-1件物品所获得的最大价值
                        
                        (2)如果买，当前的最大价值就是a[i-1][j-goods[i-1][0]]+goods[i-1][0]*goods[i-1][1]。
                        因为要买第i件商品，所以钱数变为j-goods[i-1][0]，在钱数为j-goods[i-1][0]时，购买前
                        i-1件商品的最大价值就是a[i-1][j-goods[i-1][0]]
                        
                        '''
                        a[i][j]=max(a[i-1][j],a[i-1][j-goods[i-1][0]]+goods[i-1][0]*goods[i-1][1])

                else:                   #表示第i件商品是附商品
                    #因为是附商品，所以要购买当前商品，钱数必须大于等于主商品+附商品
                    if goods[i-1][0]+goods[goods[i-1][2]-1][0]<=j:

                        a[i][j]=max(a[i-1][j],a[i-1][j-goods[goods[i-1][2]-1][0]-goods[i-1][0]]+goods[goods[i-1][2]-1][0]*goods[goods[i-1][2]-1][1]+goods[i-1][0]*goods[i-1][1])

        print(a.max())

        #print(max([max(i) for i in a ]))
    except:
        break


















